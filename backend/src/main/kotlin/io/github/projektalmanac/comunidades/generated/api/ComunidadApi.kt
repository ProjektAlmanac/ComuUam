/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package io.github.projektalmanac.comunidades.generated.api

import io.github.projektalmanac.comunidades.generated.dto.ComunidadCreadaDto
import io.github.projektalmanac.comunidades.generated.dto.ComunidadDto
import io.github.projektalmanac.comunidades.generated.dto.CreacionComunidadDto
import io.github.projektalmanac.comunidades.generated.dto.IdUsuarioDto
import io.github.projektalmanac.comunidades.generated.dto.ListaComunidadesDto
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import javax.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:}")
interface ComunidadApi {

    @Operation(
        summary = "Agregar miembro a comunidad",
        operationId = "agregarMiembroComunidad",
        description = """Agrega a un miembro a una comunidad""",
        responses = [
            ApiResponse(responseCode = "204", description = "No Content")
        ],
        security = [ SecurityRequirement(name = "jwt") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/comunidades/{idComunidad}/miembros"],
            consumes = ["application/json"]
    )
    fun agregarMiembroComunidad(@Parameter(description = "ID de la comunidad", required = true) @PathVariable("idComunidad") idComunidad: kotlin.Any,@Parameter(description = "") @Valid @RequestBody(required = false) idUsuarioDto: IdUsuarioDto?): ResponseEntity<Unit>

    @Operation(
        summary = "Crear una nueva comunidad",
        operationId = "crearComunidad",
        description = """Registra una nueva comunidad en el sistema""",
        responses = [
            ApiResponse(responseCode = "201", description = "Created", content = [Content(schema = Schema(implementation = ComunidadCreadaDto::class))])
        ],
        security = [ SecurityRequirement(name = "jwt") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/comunidades"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun crearComunidad(@Parameter(description = "Datos para la creación de una comunidad") @Valid @RequestBody(required = false) creacionComunidadDto: CreacionComunidadDto?): ResponseEntity<ComunidadCreadaDto>

    @Operation(
        summary = "Your GET endpoint",
        operationId = "getComunidades",
        description = """Recupera una lista con todas las comunidades que se han registrado""",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = ListaComunidadesDto::class))])
        ],
        security = [ SecurityRequirement(name = "jwt") ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/api/comunidades"],
            produces = ["application/json"]
    )
    fun getComunidades(): ResponseEntity<ListaComunidadesDto>

    @Operation(
        summary = "Obtener información de la comunidad",
        operationId = "getInfoComunidad",
        description = """Obtiene la información de la comunidad""",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = ComunidadDto::class))])
        ],
        security = [ SecurityRequirement(name = "jwt") ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/api/comunidades/{idComunidad}"],
            produces = ["application/json"]
    )
    fun getInfoComunidad(@Parameter(description = "ID de la comunidad", required = true) @PathVariable("idComunidad") idComunidad: kotlin.Any): ResponseEntity<ComunidadDto>
}
